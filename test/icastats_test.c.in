/* This program is released under the Common Public License V1.0
 *
 * You should have received a copy of Common Public License V1.0 along with
 * with this program.
 **/

/* Copyright IBM Corp. 2014 */

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <dirent.h>
#include <string.h>
#include <ctype.h>
#include "ica_api.h"
#include "testcase.h"

#define DATA_LENGTH 32
#define DES_CIPHER_BLOCK 8
#define AES_CIPHER_BLOCK 16
#define RSA_BYTE_LENGTH 256

unsigned char plain_data[] = {
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69,
	0x62, 0x69, 0x63, 0x61, 0x20, 0x69, 0x73, 0x20,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x65, 0x61, 0x73, 0x79, 0x21, 0x00,
};

int hw_flag;
unsigned int mech_len;
libica_func_list_element *pmech_list = NULL;

static int handle_ica_error(int rc, char *message);
static int is_crypto_card_loaded();
static int create_hw_info();
static int check_hw(unsigned int algo_id);
static int check_icastats(int algo_id, char *stat);
static int des_tests(unsigned char *iv, unsigned char *cmac, unsigned char *ctr);
static int tdes_tests(unsigned char *iv, unsigned char *cmac, unsigned char *ctr);
static int sha_tests();
static int rsa_tests(ica_adapter_handle_t handle);
static int aes_tests(unsigned char *iv, unsigned char *cmac, unsigned char *ctr);

static void handle_test_error(int rc, int *errors, int *skipped)
{
	switch (rc) {
	case TEST_ERR:
		(*errors)++;
		break;
	case TEST_SKIP:
		(*skipped)++;
		break;
	default:
		break;
	}
}

int main (int argc, char **argv)
{
#ifdef NO_CPACF
	UNUSED(argc);
	UNUSED(argv);
	printf("Skipping ICA-stats test, because CPACF support disabled via config option.\n");
	return TEST_SKIP;
#else
	int rc = 0, errors = 0, skipped = 0;
	int value;
	const char *ptr;
	ica_adapter_handle_t adapter_handle;

	unsigned char *cmac;
	unsigned char *ctr;
	unsigned char *iv;

	set_verbosity(argc, argv);

	/* Skip test if stats are not counted. */
	ptr = getenv(ICA_STATS_ENV);
	if (ptr && sscanf(ptr, "%i", &value) == 1 && !value)
		exit(TEST_SKIP);

	if ((cmac = malloc(AES_CIPHER_BLOCK*sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		exit(TEST_ERR);
	}
	if ((ctr = malloc(AES_CIPHER_BLOCK*sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		exit(TEST_ERR);
	}

	if ((iv = malloc(AES_CIPHER_BLOCK*sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		exit(TEST_ERR);
	}

	/* Open crypto adapter */
	rc = ica_open_adapter(&adapter_handle);
	if (rc != 0) {
		V_(printf("ica_open_adapter failed and returned %d (0x%x).\n", rc, rc));
	}

	rc = create_hw_info();
	if (rc != 0)
		exit(TEST_ERR);

	/* Reset Counters */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		exit(handle_ica_error(rc, "system"));
	rc = ica_random_number_generate(AES_CIPHER_BLOCK, ctr);
	if (rc)
		exit(handle_ica_error(rc, "ica_random_number_generate"));

	/*
	 * Check if counter for Random operations has incremented.
	 * ica_random_number_generate uses ica_drbg if available. Otherwise the
	 * old prng code is used.
	 */
	if (check_hw(SHA512_DRNG) == 1 || check_hw(SHA512) == 1)
		rc = check_icastats(SHA512_DRNG, "DRBG-SHA-512");
	else
		rc = check_icastats(P_RNG, "P_RNG");
	if (rc)
		exit(handle_ica_error(rc, "check_icastats"));

	rc = ica_random_number_generate(AES_CIPHER_BLOCK, iv);
	if (rc)
		exit(handle_ica_error(rc, "ica_random_number_generate"));

	/* Check counters for all crypto operations */
	rc = des_tests(iv, cmac, ctr);
	handle_test_error(rc, &errors, &skipped);

	rc = tdes_tests(iv, cmac, ctr);
	handle_test_error(rc, &errors, &skipped);

	rc = sha_tests();
	handle_test_error(rc, &errors, &skipped);

	rc = rsa_tests(adapter_handle);
	handle_test_error(rc, &errors, &skipped);

	rc = aes_tests(iv, cmac, ctr);
	handle_test_error(rc, &errors, &skipped);

	free(cmac);
	free(ctr);
	free(iv);

	if (errors > 0) {
		printf("%d icastats tests ended with errors.\n", errors);
		return TEST_FAIL;
	} else if (skipped > 0) {
		printf("%d icastats tests skipped, others successful.\n", skipped);
		return TEST_SUCC;
	} else {
		printf("All icastats tests passed.\n");
		return TEST_SUCC;
	}
#endif /* NO_CPACF */
}

static int is_crypto_card_loaded()
{
	DIR* sysDir;
	FILE *file;
	char dev[PATH_MAX] = "/sys/devices/ap/";
	struct dirent *direntp;
	char *type = NULL;
	size_t size;
	char c;

	if ((sysDir = opendir(dev)) == NULL)
		return 0;

	while ((direntp = readdir(sysDir)) != NULL) {
		if (strstr(direntp->d_name, "card") != 0) {
			snprintf(dev, PATH_MAX, "/sys/devices/ap/%s/type", direntp->d_name);

			if ((file = fopen(dev, "r")) == NULL) {
				closedir(sysDir);
				return 0;
			}

			if (getline(&type, &size, file) == -1) {
				fclose(file);
				closedir(sysDir);
				return 0;
			}

			/* Skip CEX?P type cards */
			if (type[strlen(type)-2] == 'P') {
				free(type);
				type = NULL;
				fclose(file);
				continue;
			}
			free(type);
			type = NULL;
			fclose(file);

			snprintf(dev, PATH_MAX, "/sys/devices/ap/%s/online", direntp->d_name);
			if ((file = fopen(dev, "r")) == NULL) {
				closedir(sysDir);
				return 0;
			}

			if ((c = fgetc(file)) == '1') {
				fclose(file);
				closedir(sysDir);
				return 1;
			}
			fclose(file);
		}
	}
	closedir(sysDir);
	return 0;
}

/*
 * Create Hardware Info database
 */
static int create_hw_info()
{
	if (ica_get_functionlist(NULL, &mech_len) != 0) {
		perror("get_functionlist: ");
		return TEST_ERR;
	}

	pmech_list = malloc(sizeof(libica_func_list_element)*mech_len);
	if (ica_get_functionlist(pmech_list, &mech_len) != 0) {
		perror("get_functionlist: ");
		free(pmech_list);
		return TEST_ERR;
	}

	hw_flag = is_crypto_card_loaded();

	return 0;
}

/*
 * Check if a crypto operation is supported in hardware
 */
static int check_hw(unsigned int algo_id)
{
	int i;

	for (i = mech_len - 1; i >= 0; i--) {
		if (pmech_list[i].mech_mode_id == algo_id)
			break;
	}

	if (i < 0)
		return -1;

	if (hw_flag) {
		if (pmech_list[i].flags & (ICA_FLAG_SHW | ICA_FLAG_DHW))
			return 1;
		else
			return 0;
	} else {
		if (pmech_list[i].flags & ICA_FLAG_SHW)
			return 1;
		else
			return 0;
	}
}

/*
 * Check if icastats has counted correctly
 */
static int check_icastats(int algo_id, char *stat)
{
	char cmd[256], line[256], *p;
	FILE *f;
	int i, hw, rc = -1, counters = 0;
	uint64_t hwcounter1 = 0, hwcounter2 = 0, swcounter1 = 0, swcounter2 = 0;

	hw = check_hw(algo_id);
	if (hw < 0)
		return TEST_ERR; /* unknown algo_id */

	sprintf(cmd, "@builddir@icastats | grep '%s'", stat);
	f = popen(cmd, "r");
	if (!f) {
		perror("error in peopen");
		return TEST_ERR;
	}
	if (fgets(line, sizeof(line), f) == NULL) {
		perror("error in fgets");
		return TEST_ERR;
	}
	pclose(f);

	/* remove trailing whitespace from the line */
	i = strlen(line);
	while (i > 0 && isspace(line[i-1])) {
		line[i-1] = 0;
		i--;
	}
	p = strstr(line, "|");
	if (!p)
		goto out; /* no | in the output. Wrong algo string ? */
	p++;
	while (isspace(*p))
		p++;
	hwcounter1 = atol(p); /* parse 1st hw counter value */
	counters++;
	while (*p && !isspace(*p))
		p++; /* parse over counter value */
	while (isspace(*p))
		p++;

	/* now either a | or another counter value follows */
	if (isdigit(*p)) {
		hwcounter2 = atol(p); /* parse 2nd hw counter value */
		counters++;
		while (*p && !isspace(*p))
			p++; /* parse over counter value */
		while (isspace(*p))
			p++;
	}

	/* now there should be a | */
	if (*p != '|') {
		V_(fprintf(stderr, "parse error, missing '|' in line '%s'\n", line));
		goto out;
	}
	p++;
	while (isspace(*p))
		p++;
	swcounter1 = atol(p); /* parse 1st sw counter value */
	counters++;
	while (*p && !isspace(*p))
		p++; /* parse over counter value */
	while (isspace(*p))
		p++;

	/* maybe another counter value follows */
	if (isdigit(*p)) {
		swcounter2 = atol(p); /* parse 2nd sw counter value */
		counters++;
	}

	/* counters should be 2 or 4 now */
	if (counters == 2) {
		if (hw) {
			/* hwcounter1 should be > 0 */
			if (hwcounter1 > 0)
				rc = 0;
			else
				goto out;
		} else {
			/* swcounter1 should be > 0 */
			if (swcounter1 > 0)
				rc = 0;
			else
				goto out;
		}
	} else if (counters == 4) {
		if (hw) {
			/* hwcounter1 or hwcounter2 should be > 0 */
			if (hwcounter1 > 0 || hwcounter2 > 0)
				rc = 0;
			else
				goto out;
		} else {
			/* swcounter1 or swcounter2 should be > 0 */
			if (swcounter1 > 0 || swcounter2 > 0)
				rc = 0;
			else
				goto out;
		}
	} else {
		V_(printf("parse error, could not parse 2 or 4 counter values\n"));
		goto out;
	}

out:
	if (rc == 0) {
		V_(printf("Test %s SUCCESS.\n", stat));
	} else {
		printf("icastats %s test FAILED!\n", stat);
		V_(printf("icastats line for %s was '%s'\n", stat, line));
		return TEST_ERR;
	}

	return TEST_SUCC;
}

static int handle_ica_error(int rc, char *message)
{
	printf("Error in %s: ", message);
	switch (rc) {
		case 0:
		  V_(printf("OK\n"));
		  break;
		case EINVAL:
		  V_(printf("Incorrect parameter.\n"));
		  break;
		case ENODEV:
		  V_(printf("No hardware device available.\n"));
		  break;
		case EPERM:
		  V_(printf("Operation not permitted by Hardware.\n"));
		  break;
		case EIO:
		  V_(printf("I/O error.\n"));
		  break;
		default:
		  V_(perror(""));
	}
	return TEST_FAIL;
}

static int des_tests(unsigned char *iv, unsigned char *cmac, unsigned char *ctr)
{
	int rc = 0;
	int mode;
	unsigned char *out_buffer;
	unsigned char *inp_buffer = plain_data;
	unsigned char des_key[] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	};

#ifdef ICA_FIPS
	if (ica_fips_status() & ICA_FIPS_MODE) {
		V_(printf("All icastats DES tests skipped. (DES not FIPS approved)\n"));
		return TEST_SKIP;
	}
#endif /* ICA_FIPS */

	if ((out_buffer = malloc(DATA_LENGTH*sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		return TEST_ERR;
	}

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	for (mode = 1; mode >= 0; mode--) {
		rc = ica_des_ecb(inp_buffer, out_buffer, DATA_LENGTH, des_key, mode);
		if (rc)
			return handle_ica_error(rc, "ica_des_ecb");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}

	rc = check_icastats(DES_ECB, "DES ECB");
	if (rc != 0)
		return rc;

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	for (mode = 1; mode >= 0; mode--) {
		rc = ica_des_cbc(inp_buffer, out_buffer, DATA_LENGTH, des_key, iv, mode);
		if (rc)
			return handle_ica_error(rc, "ica_des_ecb");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES_CBC, "DES CBC");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	for (mode = 1; mode >= 0; mode--) {
		rc = ica_des_cfb(inp_buffer, out_buffer, DATA_LENGTH,
					des_key, iv, DES_CIPHER_BLOCK, mode);
		if (rc)
			return handle_ica_error(rc, "ica_des_cfb");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES_CFB, "DES CFB");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	for (mode = 1; mode >= 0; mode--) {
		rc = ica_des_cmac(inp_buffer, DATA_LENGTH, cmac, DES_CIPHER_BLOCK,
					des_key, mode);
		if (rc)
			return handle_ica_error(rc, "ica_des_cmac");
	}
	check_icastats(DES_CMAC, "DES CMAC");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	for (mode = 1; mode >= 0; mode--) {
		rc = ica_des_ctr(inp_buffer, out_buffer, DATA_LENGTH, des_key,
					ctr, DES_CIPHER_BLOCK, mode);
		if (rc)
			return handle_ica_error(rc, "ica_des_ctr");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES_CTR, "DES CTR");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	for (mode = 1; mode >= 0; mode--) {
		rc =  ica_des_ofb(inp_buffer, out_buffer, DATA_LENGTH, des_key, iv, mode);
		if (rc)
			return handle_ica_error(rc, "ica_des_ofb");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES_OFB, "DES OFB");

	free(out_buffer);

	return TEST_SUCC;
}

static int tdes_tests(unsigned char *iv, unsigned char *cmac, unsigned char *ctr)
{
	int rc = 0;
	int mode;
	unsigned char *out_buffer;
	unsigned char *inp_buffer = plain_data;
	unsigned char des_key[] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x02, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	};

#ifdef ICA_FIPS
	if (ica_fips_status() & ICA_FIPS_MODE) {
		V_(printf("All icastats TDES tests skipped."
		    " (TDES not FIPS 140-3 approved)\n"));
		return TEST_SKIP;
	}
#endif /* ICA_FIPS */

	if ((out_buffer = malloc(DATA_LENGTH * sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		return TEST_ERR;
	}

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	/* Test 3DES-ECB */
	for (mode = 1; mode >= 0; mode--) {
		rc = ica_3des_ecb(inp_buffer, out_buffer, DATA_LENGTH, des_key, mode);
		if (rc)
			return handle_ica_error(rc, "ica_3des_ecb");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	rc = check_icastats(DES3_ECB, "3DES ECB");
	if (rc != 0)
		return rc;

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	/* Test 3DES-CBC */
	for (mode = 1; mode >= 0; mode--) {
		rc = ica_3des_cbc(inp_buffer, out_buffer, DATA_LENGTH, des_key, iv, mode);
		if (rc)
			return handle_ica_error(rc, "ica_3des_cbc");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES3_CBC, "3DES CBC");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	/* Test 3DES-CFB */
	for (mode = 1; mode >= 0; mode--) {
		rc = ica_3des_cfb(inp_buffer, out_buffer, DATA_LENGTH,
				 des_key, iv, DES_CIPHER_BLOCK, mode);
		if (rc)
			return handle_ica_error(rc, "ica_3des_cfb");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES3_CFB, "3DES CFB");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	/* Test 3DES-CMAC */
	for (mode = 1; mode >= 0; mode--) {
		rc = ica_3des_cmac(inp_buffer, DATA_LENGTH, cmac, DES_CIPHER_BLOCK,
						des_key, mode);
		if (rc)
			return handle_ica_error(rc, "ica_3des_cmac");
	}
	check_icastats(DES3_CMAC, "3DES CMAC");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	/* Test 3DES-CTR */
	for (mode = 1; mode >= 0; mode--) {
		rc = ica_3des_ctr(inp_buffer, out_buffer, DATA_LENGTH, des_key,
				ctr, DES_CIPHER_BLOCK, mode);
		if (rc)
			return handle_ica_error(rc, "ica_3des_ctr");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES3_CTR, "3DES CTR");

	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	/* Test 3DES-OFB */
	for (mode = 1; mode >= 0; mode--) {
		rc = ica_3des_ofb(inp_buffer, out_buffer, DATA_LENGTH, des_key, iv, mode);
		if (rc)
			return handle_ica_error(rc, "ica_3des_ofb");

		if (mode == ICA_ENCRYPT)
			inp_buffer = out_buffer;
		else if (mode == ICA_DECRYPT)
			inp_buffer = plain_data;
	}
	check_icastats(DES3_OFB, "3DES OFB");

	free(out_buffer);

	return TEST_SUCC;
}

#define SHA3_PARMBLOCK_LENGTH           200
#define SHAKE128_64_HASH_LENGTH          64
#define SHAKE256_256_HASH_LENGTH        256

static int sha_tests()
{
	int rc = 0;
	unsigned char hash[SHA512_HASH_LENGTH];
	unsigned char shake[SHAKE256_256_HASH_LENGTH];

	sha_context_t sha_context0;
	sha256_context_t sha_context1;
	sha512_context_t sha_context2;
	sha3_224_context_t sha3_224_context;
	sha3_256_context_t sha3_256_context;
	sha3_384_context_t sha3_384_context;
	sha3_512_context_t sha3_512_context;
	shake_128_context_t shake_128_context;
	shake_256_context_t shake_256_context;

	/* Test SHA-1 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha1(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data, &sha_context0, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha1");
	rc = check_icastats(SHA1, "SHA-1");
	if (rc != 0)
		return rc;

	/* Test SHA-224 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha224(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data, &sha_context1, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha224");
	check_icastats(SHA224, "SHA-224");

	/* Test SHA-256 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha256(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&sha_context1, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha256");
	check_icastats(SHA256, "SHA-256");

	/* Test SHA-384 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha384(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&sha_context2, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha384");
	check_icastats(SHA384, "SHA-384");

	/* Test SHA-512 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha512(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&sha_context2, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha512");
	check_icastats(SHA512, "SHA-512");

	/* Check if SHA-3 is available on this system and return if not */
	if (!check_hw(SHA3_224))
		return TEST_SUCC;

	/* Test SHA3-224 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha3_224(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&sha3_224_context, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha3_224");
	check_icastats(SHA3_224, "SHA3-224");

	/* Test SHA3-256 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha3_256(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&sha3_256_context, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha3_256");
	check_icastats(SHA3_256, "SHA3-256");

	/* Test SHA3-384 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha3_384(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&sha3_384_context, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha3_384");
	check_icastats(SHA3_384, "SHA3-384");

	/* Test SHA3-512 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_sha3_512(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&sha3_512_context, hash);
	if (rc)
		return handle_ica_error(rc, "ica_sha3_512");
	check_icastats(SHA3_512, "SHA3-512");

	/* Test SHAKE-128 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_shake_128(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&shake_128_context, shake, SHAKE128_64_HASH_LENGTH);
	if (rc)
		return handle_ica_error(rc, "ica_shake_128");
	check_icastats(SHAKE128, "SHAKE-128");

	/* Test SHAKE-256 */
	rc = system("@builddir@icastats -r");
	if (rc == -1)
		return handle_ica_error(rc, "system");

	rc = ica_shake_256(SHA_MSG_PART_ONLY, DATA_LENGTH, plain_data,
			&shake_256_context, shake, SHAKE256_256_HASH_LENGTH);
	if (rc)
		return handle_ica_error(rc, "ica_shake_256");
	check_icastats(SHAKE256, "SHAKE-256");

	return TEST_SUCC;
}

static int rsa_tests(ica_adapter_handle_t handle)
{
	unsigned char e[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x01 };

	unsigned char n[] = { 0xba, 0xd4, 0x7a, 0x84, 0xc1, 0x78, 0x2e, 0x4d, 0xbd,
		0xd9, 0x13, 0xf2, 0xa2, 0x61, 0xfc, 0x8b, 0x65, 0x83, 0x84, 0x12,
		0xc6, 0xe4, 0x5a, 0x20, 0x68, 0xed, 0x6d, 0x7f, 0x16, 0xe9, 0xcd,
		0xf4, 0x46, 0x2b, 0x39, 0x11, 0x95, 0x63, 0xca, 0xfb, 0x74, 0xb9,
		0xcb, 0xf2, 0x5c, 0xfd, 0x54, 0x4b, 0xda, 0xe2, 0x3b, 0xff, 0x0e,
		0xbe, 0x7f, 0x64, 0x41, 0x04, 0x2b, 0x7e, 0x10, 0x9b, 0x9a, 0x8a,
		0xfa, 0xa0, 0x56, 0x82, 0x1e, 0xf8, 0xef, 0xaa, 0xb2, 0x19, 0xd2,
		0x1d, 0x67, 0x63, 0x48, 0x47, 0x85, 0x62, 0x2d, 0x91, 0x8d, 0x39,
		0x5a, 0x2a, 0x31, 0xf2, 0xec, 0xe8, 0x38, 0x5a, 0x81, 0x31, 0xe5,
		0xff, 0x14, 0x33, 0x14, 0xa8, 0x2e, 0x21, 0xaf, 0xd7, 0x13, 0xba,
		0xe8, 0x17, 0xcc, 0x0e, 0xe3, 0x51, 0x4d, 0x48, 0x39, 0x00, 0x7c,
		0xcb, 0x55, 0xd6, 0x84, 0x09, 0xc9, 0x7a, 0x18, 0xab, 0x62, 0xfa,
		0x6f, 0x9f, 0x89, 0xb3, 0xf9, 0x4a, 0x27, 0x77, 0xc4, 0x7d, 0x61,
		0x36, 0x77, 0x5a, 0x56, 0xa9, 0xa0, 0x12, 0x7f, 0x68, 0x24, 0x70,
		0xbe, 0xf8, 0x31, 0xfb, 0xec, 0x4b, 0xcd, 0x7b, 0x50, 0x95, 0xa7,
		0x82, 0x3f, 0xd7, 0x07, 0x45, 0xd3, 0x7d, 0x1b, 0xf7, 0x2b, 0x63,
		0xc4, 0xb1, 0xb4, 0xa3, 0xd0, 0x58, 0x1e, 0x74, 0xbf, 0x9a, 0xde,
		0x93, 0xcc, 0x46, 0x14, 0x86, 0x17, 0x55, 0x39, 0x31, 0xa7, 0x9d,
		0x92, 0xe9, 0xe4, 0x88, 0xef, 0x47, 0x22, 0x3e, 0xe6, 0xf6, 0xc0,
		0x61, 0x88, 0x4b, 0x13, 0xc9, 0x06, 0x5b, 0x59, 0x11, 0x39, 0xde,
		0x13, 0xc1, 0xea, 0x29, 0x27, 0x49, 0x1e, 0xd0, 0x0f, 0xb7, 0x93,
		0xcd, 0x68, 0xf4, 0x63, 0xf5, 0xf6, 0x4b, 0xaa, 0x53, 0x91, 0x6b,
		0x46, 0xc8, 0x18, 0xab, 0x99, 0x70, 0x65, 0x57, 0xa1, 0xc2, 0xd5,
		0x0d, 0x23, 0x25, 0x77, 0xd1 };

	unsigned char input_data[] = { 0x7e, 0x65, 0xb9, 0x98, 0xa0, 0x5f, 0x62,
		0x6b, 0x02, 0x8c, 0x75, 0xdc, 0x3f, 0xbf, 0x98, 0x96, 0x3d, 0xce,
		0x66, 0xd0, 0xf4, 0xc3, 0xae, 0x42, 0x37, 0xcf, 0xf3, 0x04, 0xd8,
		0x4d, 0x88, 0x36, 0xcb, 0x6b, 0xad, 0x9a, 0xc8, 0x6f, 0x9d, 0x1b,
		0x8a, 0x28, 0xdd, 0x70, 0x40, 0x47, 0x88, 0xb8, 0x69, 0xd2, 0x42,
		0x9f, 0x1e, 0xc0, 0x66, 0x3e, 0x51, 0xb7, 0x53, 0xf7, 0x45, 0x1c,
		0x6b, 0x46, 0x45, 0xd9, 0x91, 0x26, 0xe4, 0x57, 0xc1, 0xda, 0xc4,
		0x95, 0x51, 0xd8, 0x6a, 0x8a, 0x97, 0x4a, 0x31, 0x31, 0xe9, 0xb3,
		0x71, 0xd5, 0xc2, 0x14, 0xcc, 0x9f, 0xf2, 0x40, 0xc2, 0x99, 0xbd,
		0x0e, 0x62, 0xdb, 0xc7, 0xa9, 0xa2, 0xda, 0xd9, 0xfa, 0x54, 0x04,
		0xad, 0xb0, 0x06, 0x32, 0xd3, 0x63, 0x32, 0xd5, 0xbe, 0x61, 0x06,
		0xe9, 0xe6, 0xec, 0x81, 0xca, 0xc4, 0x5c, 0xd3, 0x39, 0xcc, 0x87,
		0xab, 0xbe, 0x7f, 0x89, 0x43, 0x08, 0x00, 0xe1, 0x6e, 0x03, 0x2a,
		0x66, 0x21, 0x0b, 0x25, 0xe9, 0x26, 0xed, 0xa2, 0x43, 0xd9, 0xf0,
		0x99, 0x55, 0x49, 0x6d, 0xdb, 0xc7, 0x7e, 0xf7, 0x4f, 0x17, 0xfe,
		0xe4, 0x1c, 0x44, 0x35, 0xe7, 0x8b, 0x46, 0x96, 0x5b, 0x71, 0x3d,
		0x72, 0xce, 0x8a, 0x31, 0xaf, 0x64, 0x15, 0x38, 0xad, 0xd3, 0x87,
		0xfe, 0xdf, 0xd8, 0x8b, 0xb2, 0x2a, 0x42, 0xeb, 0x3b, 0xda, 0x40,
		0xf7, 0x2e, 0xca, 0xd9, 0x41, 0xdb, 0xff, 0xdd, 0x47, 0xb3, 0xe7,
		0x77, 0x37, 0xda, 0x74, 0x15, 0x53, 0xa4, 0x5b, 0x63, 0x0d, 0x07,
		0x0b, 0xcc, 0x52, 0x05, 0x80, 0x4b, 0xf8, 0x0e, 0xe2, 0xd5, 0x16,
		0x12, 0x87, 0x5d, 0xbc, 0x47, 0x96, 0x96, 0x00, 0x52, 0xf1, 0x68,
		0x7e, 0x00, 0x74, 0x00, 0x7e, 0x6a, 0x33, 0xab, 0x8b, 0x20, 0x85,
		0xc0, 0x33, 0xf9, 0x89, 0x2b, 0x6f, 0x74 };

	unsigned char p[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 8 bytes zero padding */
		0xe7, 0xc9, 0xe4, 0xb3, 0xe5, 0xd7, 0xac, 0x9e, 0x83, 0xbe, 0x08, 0x32,
		0x81, 0x05, 0x35, 0x6d, 0xfe, 0xef, 0xe2, 0x22, 0xf2, 0x6c, 0x95,
		0x37, 0x8e, 0xff, 0xd2, 0x15, 0x0f, 0xad, 0xf7, 0xba, 0x23, 0xf5,
		0xb4, 0x70, 0x5d, 0x82, 0xe4, 0xf1, 0xbc, 0x45, 0x05, 0x70, 0x67,
		0xc7, 0xde, 0xf7, 0x3e, 0x21, 0x00, 0xf7, 0x56, 0xee, 0x6d, 0x54,
		0x79, 0x65, 0xfa, 0x4f, 0x24, 0xb8, 0x5d, 0x68, 0x86, 0x7f, 0x03,
		0xd7, 0xc8, 0x86, 0xd1, 0xdb, 0xcc, 0xa4, 0xc5, 0x89, 0x74, 0x57,
		0x01, 0xb3, 0x62, 0xa1, 0xf1, 0x41, 0x7f, 0x47, 0x1d, 0x84, 0x75,
		0xb6, 0xb7, 0xa1, 0x6a, 0x4c, 0x48, 0xef, 0x1f, 0x55, 0x6e, 0xdc,
		0x3f, 0x0f, 0xf6, 0xba, 0x13, 0xd3, 0x65, 0xd6, 0xe8, 0x27, 0x51,
		0xf2, 0x07, 0xd9, 0x11, 0x01, 0xc8, 0xee, 0xa1, 0x01, 0x3c, 0xcd,
		0xd9, 0xe1, 0xde, 0x4c, 0x38, 0x7f };

	unsigned char q[] = { 0xce, 0x58, 0x60, 0x2e, 0x05, 0x1f, 0x0f, 0x46, 0x47,
		0xc4, 0xec, 0x57, 0xf6, 0x82, 0xe5, 0x73, 0x7f, 0xc4, 0x82, 0xa8,
		0xa1, 0xff, 0xac, 0x90, 0x43, 0xbb, 0xa4, 0xfb, 0xa3, 0x38, 0x7d,
		0x7d, 0xd2, 0x15, 0x45, 0x07, 0xaf, 0x1e, 0x28, 0xbd, 0x81, 0xb6,
		0x1f, 0xcd, 0xfe, 0x35, 0xf9, 0x73, 0x4e, 0x0d, 0x9b, 0x53, 0x68,
		0x2e, 0xc7, 0x85, 0xf1, 0xf6, 0xe6, 0x22, 0x4f, 0x63, 0xd1, 0x0b,
		0xf7, 0x84, 0x84, 0xb8, 0x3a, 0x42, 0x54, 0xf3, 0x33, 0xd0, 0xfb,
		0x3f, 0x3e, 0x9e, 0x18, 0x34, 0xbe, 0xde, 0x52, 0xe3, 0x07, 0x8a,
		0xc2, 0x79, 0xa8, 0x62, 0xfb, 0x90, 0xaf, 0x26, 0x6d, 0x75, 0x91,
		0xc8, 0x1f, 0x20, 0xb7, 0x18, 0xd0, 0x7d, 0x51, 0xbf, 0xc2, 0x21,
		0xb6, 0x6a, 0x25, 0x40, 0x3b, 0x4a, 0xc1, 0xa6, 0x8d, 0x67, 0x3f,
		0xdd, 0x95, 0x9b, 0x01, 0xec, 0xf3, 0xd0, 0xa7, 0xaf };

	unsigned char dp[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 8 bytes zero padding */
		0x7A, 0x54, 0x57, 0x5B, 0x8A, 0x86, 0x55, 0x18, 0x23, 0xB7, 0x7B, 0x64,
		0x0C, 0x2B, 0xCF, 0x93, 0x09, 0xE5, 0x58, 0x97, 0xD1, 0x11, 0xF5,
		0x7E, 0xA8, 0xFD, 0xE2, 0xC6, 0x32, 0xCC, 0x41, 0xDD, 0xFF, 0x74,
		0x81, 0x92, 0x7C, 0x07, 0xC5, 0x04, 0xBF, 0xB4, 0x3D, 0xB6, 0xA1,
		0x4F, 0x1F, 0x21, 0xA5, 0xAC, 0x8D, 0x71, 0xFC, 0x73, 0x41, 0x48,
		0x3F, 0xF9, 0xCE, 0x2D, 0x4E, 0xD7, 0xEE, 0x94, 0x67, 0xC7, 0x49,
		0x23, 0xED, 0x35, 0x1A, 0x34, 0xC2, 0xC0, 0x83, 0x70, 0x93, 0xF2,
		0x07, 0x77, 0xC1, 0x2A, 0x6E, 0xC5, 0x7E, 0x82, 0xED, 0xD5, 0x26,
		0xBB, 0x14, 0x17, 0x20, 0x9E, 0xBA, 0x2F, 0x59, 0x7E, 0x21, 0x50,
		0x24, 0x08, 0x2C, 0xD2, 0xEF, 0xFB, 0xB5, 0xD7, 0xC2, 0x16, 0x5E,
		0x6D, 0x3A, 0x2F, 0x19, 0x86, 0xB3, 0xA1, 0x1D, 0x60, 0x25, 0xD3,
		0x0E, 0x96, 0xE2, 0x57, 0x9F, 0xC9 };

	unsigned char dq[] = { 0xCB, 0x5B, 0x75, 0x8E, 0x65, 0x25, 0xB3, 0x1C, 0x04,
		0x67, 0x22, 0xB5, 0x9E, 0x10, 0x6A, 0xA9, 0x65, 0x65, 0xF9, 0x8E,
		0xCF, 0xF8, 0xF5, 0xCC, 0x47, 0xB4, 0x8A, 0x68, 0x24, 0xF7, 0xEB,
		0x55, 0x30, 0xD2, 0x1D, 0x71, 0xF1, 0x37, 0xBB, 0xD6, 0xE8, 0x1A,
		0xE1, 0x45, 0x56, 0x1F, 0x43, 0x74, 0x4B, 0x9C, 0x45, 0x53, 0xF1,
		0xFD, 0x08, 0x4E, 0x0D, 0xA4, 0xD2, 0x31, 0x46, 0x24, 0x8D, 0x45,
		0x49, 0xEE, 0xA4, 0x0E, 0x1B, 0xFC, 0x7B, 0x54, 0x23, 0xE0, 0xF5,
		0x7B, 0xE2, 0xEE, 0x53, 0xD4, 0xC7, 0xB6, 0xBB, 0xE1, 0x5A, 0xF1,
		0x79, 0xB0, 0x04, 0x2F, 0x68, 0xD5, 0xB2, 0x88, 0x20, 0xA0, 0x19,
		0xC8, 0x2C, 0x45, 0x45, 0xAD, 0x82, 0xEB, 0xBE, 0xC1, 0x49, 0x45,
		0x88, 0x4D, 0x1B, 0xE1, 0x2D, 0x8E, 0x03, 0x43, 0x6D, 0x60, 0x30,
		0x24, 0xE4, 0xE8, 0x1B, 0x01, 0xB7, 0x58, 0x0F, 0xA9 };

	unsigned char qinv[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 8 bytes zero padding */
		0x17, 0x2B, 0xDA, 0x79, 0xDE, 0x9F, 0xEE, 0x37, 0x61, 0xA3, 0x49, 0xC9,
		0x4D, 0x28, 0xA0, 0x24, 0x03, 0xB6, 0x0A, 0xDE, 0x88, 0xC9, 0x26,
		0xEB, 0xC6, 0xAF, 0x46, 0x49, 0xBE, 0x73, 0x33, 0x30, 0x72, 0xAB,
		0xFE, 0x7B, 0x3E, 0xE4, 0x4C, 0xAF, 0xA9, 0x0C, 0xD0, 0xF7, 0x61,
		0xFC, 0xCE, 0x20, 0x35, 0xE5, 0x2E, 0x53, 0x9B, 0x05, 0x29, 0x3C,
		0xAC, 0x05, 0x63, 0xED, 0x32, 0x93, 0xB3, 0x9D, 0xB8, 0x9D, 0x53,
		0x5E, 0xB8, 0xC5, 0xDE, 0xC9, 0xEF, 0x6B, 0x2F, 0x1D, 0x94, 0x1B,
		0x2F, 0xE9, 0xB4, 0x8A, 0xE6, 0xCA, 0x15, 0xCA, 0xC7, 0x08, 0xDA,
		0x35, 0xD2, 0xBA, 0x6F, 0x33, 0x31, 0x18, 0x1C, 0xE8, 0x46, 0xED,
		0x6D, 0xFA, 0xEF, 0xE5, 0x57, 0x6A, 0x65, 0x01, 0x9C, 0xD7, 0xF7,
		0x04, 0xB3, 0xFF, 0xA5, 0x94, 0xCF, 0x41, 0x8B, 0x14, 0xCA, 0x62,
		0x02, 0xD0, 0x9E, 0x22, 0x60, 0xE4 };

	unsigned char *output_data;
	unsigned char *data = input_data;
	int rc = 0;

	if ((output_data = malloc(RSA_BYTE_LENGTH * sizeof(char))) == NULL) {
		perror("error in malloc: ");
		return TEST_ERR;
	}

	ica_rsa_key_mod_expo_t mod_expo_key = {RSA_BYTE_LENGTH, n, e};
	ica_rsa_key_crt_t crt_key = {RSA_BYTE_LENGTH, p, q, dp, dq, qinv};

	/* Test RSA-ME */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(output_data);
		return handle_ica_error(rc, "system");
	}

	rc = ica_rsa_mod_expo(handle, data, &mod_expo_key, output_data);
	if (rc) {
#ifndef NO_SW_FALLBACKS
		free(output_data);
		return handle_ica_error(rc, "ica_rsa_mod_expo");
#else
		if (rc == ENODEV) {
			V_(printf("Test RSA-ME and RSA-CRT SKIPPED (no card).\n"));
			free(output_data);
			return TEST_SKIP;
		} else {
			free(output_data);
			return handle_ica_error(rc, "ica_rsa_mod_expo");
		}
#endif
	}

	/* Test RSA-CRT */
	rc = check_icastats(RSA_ME, "RSA-ME");
	if (rc != 0) {
		free(output_data);
		return rc;
	}

	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(output_data);
		return handle_ica_error(rc, "system");
	}

	rc = ica_rsa_crt(handle, data, &crt_key, output_data);
	if (rc) {
#ifndef NO_SW_FALLBACKS
		free(output_data);
		return handle_ica_error(rc, "ica_rsa_crt");
#else
		if (rc == ENODEV) {
			V_(printf("Test RSA-CRT SKIPPED (no card).\n"));
			free(output_data);
			return TEST_SKIP;
		} else {
			free(output_data);
			return handle_ica_error(rc, "ica_rsa_crt");
		}
#endif
	}

	check_icastats(RSA_CRT, "RSA-CRT");

	free(output_data);

	return TEST_SUCC;
}

static int aes_tests(unsigned char *iv, unsigned char *cmac, unsigned char *ctr)
{
	int rc = 0;
	int mode;
	unsigned char *output_buffer, *tag, *nonce;
	unsigned char *input_buffer = plain_data;

	unsigned char aes_key[] = {
		0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
	};
	unsigned char aes_key2[] = {
		0x2c, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
	};

	unsigned char tweak[] = {
		0x72, 0xf3, 0xb0, 0x54, 0xcb, 0xdc, 0x2f, 0x9e,
		0x3c, 0x5b, 0xc5, 0x51, 0xd4, 0x4d, 0xdb, 0xa0,
	};

	#define NONCE_LENGTH 10

	if ((nonce = malloc(NONCE_LENGTH * sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		return TEST_ERR;
	}

	if ((tag = malloc(AES_CIPHER_BLOCK * sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		return TEST_ERR;
	}

	if ((output_buffer = malloc((DATA_LENGTH+AES_CIPHER_BLOCK) * sizeof(char))) == NULL) {
		perror("Error in malloc: ");
		return TEST_ERR;
	}

	/* Test AES-CBC */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return handle_ica_error(rc, "system");
	}

	for (mode = 1;mode >= 0;mode--) {
		rc = ica_aes_cbc(input_buffer, output_buffer, DATA_LENGTH, aes_key,
				AES_KEY_LEN128, iv, mode);
		if (rc) {
			free(tag);
			free(output_buffer);
			free(nonce);
			return handle_ica_error(rc, "ica_aes_cbc");
		}
		if (mode == ICA_ENCRYPT)
			input_buffer = output_buffer;
		else if (mode == ICA_DECRYPT)
			input_buffer = plain_data;
	}
	rc = check_icastats(AES_CBC, "AES CBC");
	if (rc != 0) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return rc;
	}

	/* Test AES-CFB */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return handle_ica_error(rc, "system");
	}

	for (mode = 1;mode >= 0;mode--) {
		rc = ica_aes_cfb(input_buffer, output_buffer, DATA_LENGTH, aes_key,
				AES_KEY_LEN128, iv, AES_CIPHER_BLOCK, mode);
		if (rc) {
			free(tag);
			free(output_buffer);
			free(nonce);
			return handle_ica_error(rc, "ica_aes_cfb");
		}

		if (mode == ICA_ENCRYPT)
			input_buffer = output_buffer;
		else if (mode == ICA_DECRYPT)
			input_buffer = plain_data;
	}
	check_icastats(AES_CFB, "AES CFB");

	/* Test AES-CMAC */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return handle_ica_error(rc, "system");
	}

	for (mode = 1;mode >= 0;mode--) {
		rc = ica_aes_cmac(input_buffer, DATA_LENGTH, cmac, AES_CIPHER_BLOCK,
				aes_key, AES_KEY_LEN128, mode);
		if (rc) {
			free(tag);
			free(output_buffer);
			free(nonce);
			return handle_ica_error(rc, "ica_aes_cmac");
		}
	}
	check_icastats(AES_CMAC, "AES CMAC");

	/* Test AES-CTR */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return handle_ica_error(rc, "system");
	}

	for (mode = 1;mode >= 0;mode--) {
		rc = ica_aes_ctr(input_buffer, output_buffer, DATA_LENGTH, aes_key,
				AES_KEY_LEN128, ctr, AES_CIPHER_BLOCK, mode);
		if (rc) {
			free(tag);
			free(output_buffer);
			free(nonce);
			return handle_ica_error(rc, "ica_aes_ctr");
		}

		if (mode == ICA_ENCRYPT)
			input_buffer = output_buffer;
		else if (mode == ICA_DECRYPT)
			input_buffer = plain_data;
	}
	check_icastats(AES_CTR, "AES CTR");

	/* Test AES-ECB */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return handle_ica_error(rc, "system");
	}

	for (mode = 1;mode >= 0;mode--) {
		rc = ica_aes_ecb(input_buffer, output_buffer, DATA_LENGTH, aes_key,
				AES_KEY_LEN128, mode);
		if (rc) {
			free(tag);
			free(output_buffer);
			free(nonce);
			return handle_ica_error(rc, "ica_aes_ecb");
		}

		if (mode == ICA_ENCRYPT)
			input_buffer = output_buffer;
		else if (mode == ICA_DECRYPT)
			input_buffer = plain_data;
	}
	check_icastats(AES_ECB, "AES ECB");

	/* Test AES-OFB */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return handle_ica_error(rc, "system");
	}

	for (mode = 1;mode >= 0;mode--) {
		rc = ica_aes_ofb(input_buffer, output_buffer, DATA_LENGTH, aes_key,
				AES_KEY_LEN128, iv, mode);
		if (rc) {
			free(tag);
			free(output_buffer);
			free(nonce);
			return handle_ica_error(rc, "ica_aes_ofb");
		}

		if (mode == ICA_ENCRYPT)
			input_buffer = output_buffer;
		else if (mode == ICA_DECRYPT)
			input_buffer = plain_data;
	}
	check_icastats(AES_OFB, "AES OFB");

	/* Test AES-XTS */
	rc = system("@builddir@icastats -r");
	if (rc == -1) {
		free(tag);
		free(output_buffer);
		free(nonce);
		return handle_ica_error(rc, "system");
	}

	for (mode = 1; mode >= 0; mode--) {
		rc = ica_aes_xts(input_buffer, output_buffer, DATA_LENGTH, aes_key,
				aes_key2, AES_KEY_LEN128, tweak, mode);
		if (rc) {
			free(tag);
			free(output_buffer);
			free(nonce);
			return handle_ica_error(rc, "ica_aes_xts");
		}

		if (mode == ICA_ENCRYPT)
			input_buffer = output_buffer;
		else if (mode == ICA_DECRYPT)
			input_buffer = plain_data;
	}
	check_icastats(AES_XTS, "AES XTS");

	free(tag);
	free(output_buffer);
	free(nonce);

	return TEST_SUCC;
}
